OnMenuExec : all
{
	CurrentGhost = reference[1]
	TalkingGhost = CurrentGhost
	reference[0] = reference[1]
	CalibrationConfirm = "OnMainMenu"
	if !IsCalibrated(CurrentGhost); "\![raise,OnSpectrePlugin.ConfirmCalibration]"
	"\![raiseplugin,Spectre,OnMainMenu]"
}

OnMainMenu : all
{
	if !ISVAR("SpectreOn"); SpectreOn = 1
	if reference[0] != ""; CurrentGhost = reference[0]
	res_marker = version
	_index = CalibrationIndex(CurrentGhost)
	
	// res_event = "OnSimplicityPlugin.ExampleEvent"
	// res_target = "__SYSTEM_ALL_GHOST__"
	
	"\C\![lock,balloonrepaint]\c" //I don't think this is working but whatever
	"\0\_q\*\b[2]\![no-autopause]\![set,autoscroll,disable]"
	"\![timerraise,0,1,OnSpectrePlugin.Possession]"
	"%(Heading('Spectre'))"
	
	//"%(ControlLevel)\n\n"
	
	"Spectre enhancements: \_a[OnToggleSpectreEnhancements]%(('Off','On')[SpectreOn])\_a\n\n"
	
	if !SpectreOn; "\f[color,disable]"
	
	if SpectreOn
	{
		if Flag("Spectre seen")
		{
			if !MetSpectre
			{
				if !Flag("Stage 1") && Flag("Stage 0 greeted")
				{
					"\![*]\__q[OnSpectreSeen.StillThere]Hello?\![dummy] Are you still there?\__q"
				}
				else
				{
					"\![*]\__q[OnSpectreSeen]Is someone else here?\__q"
				}
				"\n\n"
			}
			elseif !Flag("Second boot complete") && !GreetedToday
			{
				"\![*]\__q[OnSecondSeen]Hello?\__q"
				"\n\n"
			}
		}
		
	}
	
	if MetSpectre
	{
		switch SpectreOn
		{
			"\![*]Listen to Spectre"
			"\![*]\__q[OnSpectreTalk,""%(CurrentGhost)""]Listen to Spectre\__q"
		}
		if SpectreOn && LastTalk != ""
		{
			"\n"
			"\![*]\__q[OnSpectreLastTalk,""%(CurrentGhost)""]Remember what Spectre said\__q"
		}
		"\n\n"
	}
	
	if Flag("Stage 3") && TodaysPool == "dissociated"
	{
		"\![*]\__q[OnReachOut]"
		switch ReachedOut //this is in REVERSE ORDER!!! when it hits 0 you win and get through
		{
			"" //leave blank
			"Take as long as you need. I'll be here." //Last time bothering
			"Try to breathe, nice and slowly."
			"You'll get through this. It's not forever."
			"It's okay now. Everything is fine."
			"Hey, can you hear me?" //First time bothering
		}
		"\__q"
		"\n\n"
	}
	
	if !IsCalibrated(CurrentGhost)
	{
		"\![*]\_a[OnCalibrationStart,""%(reference[0])"",mainmenu]Calibrate ""%(CurrentGhost)""\_a"
		"\n\n"
	}
	
	"\![*]\__q[OnSettings,""%(reference[0])""]Settings\__q\n\n"
	
	//"Booted: %(BootedGhosts)\n\n"
	
	
	if DebugMode == 1
	{
		"DEBUG:\n"
		"Met spectre: \__q[OnToggleMetSpectre]%(MetSpectre) ---\__q\n"
		"Stage: \__q[OnToggleStage]%(Flag('Stage 1') + Flag('Stage 2') + Flag('Stage 3')) ---\__q\n"
		"Today's pool: %(TodaysPool)\n"
		foreach DialoguePools; _pool
		{
			"\q[%(_pool),OnDebug.ChangePool,%(_pool)]  "
		}
		"\c[char,2]\n"
		//"GreetedToday %(GreetedToday)\n"
		//"CanGoToStage2 %(CanGoToStage2)\n"
		"Calibration: %(GhostCalibrations.List[_index]) - %(_index)\n"
		"\![*]\q[Tester!,script:""%(normal)Normal\_w[1000]\n %(embarrassed)Embarrassed\_w[1000]\n %(surprised)Surprised\_w[1000]\n %(anxious)Anxious\_w[1000]\n%(discouraged)Discouraged\_w[1000]\n%(smile)Smile\_w[1000]\n%(relieved)Relieved\_w[1000]\n%(angry)Angry\_w[1000]\n%(sweat)Sweat\_w[1000]\n%(indignant)Indignant\_w[1000]\n%(thinking)Thinking\_w[1000]\n%(unamused)Unamused""]\n"
		"%(DialogueDisperser)\n"
		"\n"
	}
	
	"\f[color,default]"
	"\![*]\q[Close menu,OnCancel]"
	"\![unlock,balloonrepaint]"
}

OnSpectreLastTalk
{
	DetermineTalkTarget(reference[0])
	LastTalk
}

OnSpectreSeen : all
{
	GreetedToday = 1
	AddFlag("Stage 0 greeted")
	"\*\t"
	AutoPause("\0%(blank)W-what? Hello? Did you%(emdash) Can you... hear me?")
	"\n\n\_q"
	"\![*]\__q[OnSpectreSeen.ICanHear]I can hear you.\__q\n"
	"\![*]\__q[OnSpectreSeen.Silent]...\__q"
}

	OnSpectreSeen.ICanHear : all
	{
		"\*\t"
		AutoPause("\0%(blank)You can? Really!? I thought I was going to be alone forever! \n\nCan you see anything from where you are? It's dark here...")
		"\n\n\_q"
		"\![*]\__q[OnSpectreSeen.ICanSee]I can see,\![dummy] but I don't know where you are.\__q\n"
		"\![*]\__q[OnSpectreSeen.ItsDarkHere]It's dark here,\![dummy] too.\__q"
	}
	
		OnSpectreSeen.ICanSee : all
		{
			AddFlag("Stage 1")
			LastTalk = AutoPause("\0%(blank)O-oh... Maybe you can try to find me? Or, I'll try to find you! %(fadein)\_w[1500]Just... keep talking to me until then? Please?%(end)")
			LastTalk
		}
		
		OnSpectreSeen.ItsDarkHere : all
		{
			AddFlag("Stage 1")
			LastTalk = AutoPause("\0%(blank)D-don't be scared! I'll try to find you... Or maybe you'll find me? %(fadein)\_w[1500]... Either way, we should keep talking so we don't get even more lost, right?%(end)")
			LastTalk
		}
	
	OnSpectreSeen.Silent : all
	{
		_ending = SpookyText.grow("Where did you go!?")
		LastTalk = AutoPause("\0%(blank)...? \_w[1500]Hello? \_w[1500]Where did you go...? \_w[1500]Where did you go? \_w[1500]%(_ending)%(end)")
		LastTalk
	}

	OnSpectreSeen.StillThere : all
	{
		GreetedToday = 1
		
		"\*\t"
		AutoPause("\0%(blank)...! You! I knew you were real! That... \f[italic,1]hic...\w8\w8\f[italic,default] that was so mean... Why would you do that?")
		"\n\n\_q"
		"\![*]\__q[OnSpectreSeen.Sorry]Sorry...\__q\n"
		"\![*]\__q[OnSpectreSeen.IWasScared]I was scared.\__q"
	}

		OnSpectreSeen.Sorry : all
		{
			AddFlag("Stage 1")
			
			LastTalk = AutoPause("\0%(blank)... I guess it's okay. Just... please don't do it again?\n\n%(fadein)\_w[1500]I was... really scared...%(end)")
			LastTalk
		}

		OnSpectreSeen.IWasScared : all
		{
			AddFlag("Stage 1")
			
			LastTalk = AutoPause("\0%(blank)Scared? Of me? \n\n%(fadein)\_w[1500]... I'm sorry. I didn't mean to scare you. I'm not sure what I did, but I'll try not to do it again, okay?%(end)")
			LastTalk
		}

OnSecondSeen : all
{
	AddFlag("Second boot complete")
	
	LastTalk = AutoPause("\0%(discouraged)\f[color,disable]What... \f[italic,1]hic... \f[italic,default]\f[color,default]You came back? %(smile)You really came back... I'm so glad... %(thinking)I thought I'd be alone again...%(end)")
	LastTalk
}

OnReachOut
{
	ReachedOut--
	ReachedOutTime = GETSECCOUNT
	if ReachedOut < 0; ReachedOut = 0
	
	_amt = ReachedOut * 2
	
	if ReachedOut <= 0
	{
		ReachedOut = 0 //dunno why i am worried about negatives here but WHATEVER
		TodaysPool = "miserable"
		
		AutoPause("\0%(discouraged)...? Was that your voice? %(sweat)Thank you... I'm not sure where I was for a while there...%(end)")
	}
	else
	{
		SpookyText.overflow(reachingout,_amt)
	}
	
	// if ReachedOut == 4 //First time reaching out
	// {
		// "zzzzz"
	// }

	// elseif ReachedOut == 3
	// {
		// "zzzznoOOoOoOoooooo i'm sleepy"
	// }
	// elseif ReachedOut == 2
	// {
		// "just 10 more minutes..."
	// }
	// elseif ReachedOut == 1
	// {
		// "just 5 more minutes....... zzzzzzzzzzzzzz......"
	// }
	// else //0, break through!
	// {
		// ReachedOut = 0
		// TodaysPool = "miserable"
		
		// "ok fine im awake :c"
	// }
}

OnToggleMetSpectre
{
	if Flag("Stage 1"); DeleteFlag("Stage 1")
	else; AddFlag("Stage 1")
	
	"\![raiseplugin,Spectre,OnMainMenu]"
}

OnToggleStage
{
	if Flag("Stage 3")
	{
		DeleteFlag("Stage 1")
		DeleteFlag("Stage 2")
		DeleteFlag("Stage 3")
	}
	elseif Flag("Stage 2")
	{
		AddFlag("Stage 3")
	}
	elseif Flag("Stage 1")
	{
		AddFlag("Stage 2")
	}
	else
	{
		AddFlag("Stage 1")
	}
	"\![raiseplugin,Spectre,OnMainMenu]"
}

OnDebug.ChangePool
{
	YesterdaysPool = TodaysPool
	TodaysPool = reference[0]
	"\![raiseplugin,Spectre,OnMainMenu]"
}

OnToggleSpectreEnhancements
{
	if SpectreOn == 1; SpectreOn = 0
	else; SpectreOn = 1
	
	"\![raiseplugin,Spectre,OnMainMenu]"
}

OnCalibrationStart : all
{
	res_marker = version
	
	if reference[0] != ""; CurrentGhost = reference[0]
	MenuToReturnTo = "OnSettings"
	if reference[1] == "mainmenu"; MenuToReturnTo = "OnMainMenu"
	CalibrationConfirm = "OnCalibrationStart"
	//CalibrationList = "-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1" //this is done below, idk why
	
	"\0\_q\*\b[2]\![no-autopause]\![set,autoscroll,disable]"
	"\![raise,OnSpectrePlugin.ConfirmCalibration]"
	
	"Calibration can improve a ghost's compatibilty with Spectre. This process requires user input and will take a few moments."
	if MetSpectre; " It is best performed while using the balloon ""Ghost Balloon""."
	"\n\n"
	"Note that the ghost may briefly disappear during this process. If it does, please click ""No"" when prompted for input."
	"\n\n"
	"Proceed?\n\n"
	"\![*]\__q[OnCalibration,""%(reference[0])"",ExpressionsYesNo]Proceed\__q  \![*]\__q[%(MenuToReturnTo),""%(reference[0])""]Back\__q"
}

OnCalibration : all
{
	res_marker = version
	
	if reference[0] != ""; CurrentGhost = reference[0]
	
	_index = CalibrationIndex(CurrentGhost)
	
	_toset = reference[2] - 1
	if reference[3] == "alt"; _toset = reference[4]
	elseif reference[3] == "yes" ; CalibrationList[_toset] = "%(TOINT(reference[2]) - 1)"
	elseif reference[3] == "no"; CalibrationList[_toset] = "-1"
	
	
	"\0\_q\*\b[2]\![no-autopause]\![set,autoscroll,disable]"
	"%(Heading('Calibration'))"
	if reference[1] == "ExpressionsYesNo"
	{
		CalibrationList = "-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1"
		if _index == -1
		{
			GhostCalibrations.Name ,= CurrentGhost
			GhostCalibrations.List ,= ""
		}
		
		
		"Does this ghost have facial expressions?\n\n"
		
		"\![*]\__q[OnCalibration,""%(reference[0])"",ExpressionsMain,0]Yes\__q  \![*]\__q[OnCalibrationSet,""%(reference[0])"",NoExpressions]No\__q"
	}
	elseif reference[2] == "10"
	{
		_amt = ASEARCHEX("-1",SPLIT(CalibrationList,","))
		_amt = ARRAYSIZE(_amt)
		
		GhostCalibrations.List[_index] = CalibrationList
		"\s[0]"
		if _amt <= 2
		{
			"Calibration completed successfully."
		}
		else
		{
			"Partial calibration completed.\n\n"
			"Are you this ghost's developer? If you would like to increase your ghost's compatibility, check \_a[OnOpenDevInfo]dev_info.txt\_a after spending some time with the plugin."
		}
		"\x\![raiseplugin,Spectre,OnMainMenu,""%(reference[0])""]"
	}
	elseif reference[1] == "ExpressionsMain"
	{
		"\s[%(reference[2])]"
		"Please assess the current expression. Does it fit the following description?\n\n"
		
		_expressions = (/
		"Normal / default / neutral",/
		"Embarrassed / blush",/
		"Surprised / startled",/
		"Anxious / worried",/
		"Sad / discouraged",/
		"Smile",/
		"Closed eyes smile / content / relieved",/
		"Angry / frown",/
		"Sweat smile / cold smile",/
		"Embarrassed anger / Indignant",/
		"Thoughtful / thinking / confused",/
		"Unamused / bored"/
		)
		
		_expression = reference[2]
		"%(_expressions[_expression])"
		if MetSpectre; "\b[100%(_expression)2]"
		"\n\n"
		"\![*]\__q[OnCalibration,""%(reference[0])"",ExpressionsMain,%(TOINT(reference[2]) + 1),yes]Yes\__q  \__q[OnCalibration,""%(reference[0])"",ExpressionsMain,%(TOINT(reference[2]) + 1),no]No\__q"
		
		if TOINT(reference[2]) == 8
		{
			"\n"
			"\![*]\__q[OnCalibration,""%(reference[0])"",ExpressionsMain,9,alt,10]No, it looks more thoughtful / thinking / confused\__q"
		}
		elseif TOINT(reference[2]) == 9
		{
			"\n"
			"\![*]\__q[OnCalibration,""%(reference[0])"",ExpressionsMain,10,alt,11]No, it looks more unamused / bored\__q"
		}
	}
}

OnOpenDevInfo
{
	"\![open,file,%(SpectreFilePath)\dev_info.txt]"
}

OnCalibrationSet : all
{
	res_marker = version
	
	if reference[0] != ""; CurrentGhost = reference[0]
	
	_index = CalibrationIndex(CurrentGhost)
	
	if _index == -1
	{
		GhostCalibrations.Name ,= CurrentGhost
		GhostCalibrations.List ,= "none"
	}
	else
	{
		GhostCalibrations.List[_index] = "none"
	}
	
	"\0\_q\*\b[2]\![no-autopause]\![set,autoscroll,disable]"
	"%(Heading('Calibration'))"
	
	if reference[1] == "NoExpressions"
	{
		"Calibration completed successfully."
		if MetSpectre; " It is recommended to use the balloon ""Ghost Balloon"" with this ghost."
	}
	"\x\![raiseplugin,Spectre,%(MenuToReturnTo),""%(reference[0])""]"
}

OnCustomCalibrationConfirm : all
{
	res_marker = version
	
	_expressions = ("normal","embarrassed","surprised","anxious","discouraged","smile","relieved","angry","sweat","indignant","thinking","unamused")
	_calibrationlist = ("*,*,*,*,*,*,*,*,*,*,*,*")
	
	if reference[0] == "__NO_EXPRESSIONS__"
	{
		_calibrationlist = "none"
	}
	else
	{
		if ASEARCH("--option=include",reference) != -1 //include mode, only surfaces specified will be included
		{
			_calibrationlist = ("-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1")
			foreach reference; _ref
			{
				if "--option=" _in_ _ref; continue
				
				_i = ASEARCH(_ref,_expressions)
				if _i != -1
				{
					_calibrationlist[_i] = "*"
				}
			}
		}
		else //exclude mode, surfaces specified will be omitted. default.
		{
			foreach reference; _ref
			{
				if "--option=" _in_ _ref; continue
				
				_i = ASEARCH(_ref,_expressions)
				if _i != -1
				{
					_calibrationlist[_i] = -1
				}
			}
		}
	}
	
	_index = CalibrationIndex(CurrentGhost)
	
	if _index == -1
	{
		GhostCalibrations.Name ,= CurrentGhost
		GhostCalibrations.List ,= _calibrationlist
	}
	else
	{
		GhostCalibrations.List[_index] = _calibrationlist
	}
	
	if CalibrationConfirm == "OnCalibrationStart"
	{
		"\0\_q\*\b[2]\![no-autopause]\![set,autoscroll,disable]"
		"%(Heading('Calibration'))"
		
		"This ghost has custom calibration provided by the developer.\n\n"
		"Calibration set."
		
		"\x\![raiseplugin,Spectre,%(MenuToReturnTo),""%(CurrentGhost)""]"
	}
	elseif CalibrationConfirm == "OnMainMenu"
	{
		"\![raiseplugin,Spectre,OnMainMenu]"
	}
}

OnSettings : all
{
	res_marker = version
	
	if reference[0] != ""; CurrentGhost = reference[0]
	
	"\C\![lock,balloonrepaint]\c"
	"\0\_q\*\b[2]\![no-autopause]\![set,autoscroll,disable]"
	
	"%(Heading('Settings'))"
	
	if !IsCalibrated(CurrentGhost)
	{
		"\![*]\_a[OnCalibrationStart,""%(reference[0])""]Calibrate ""%(CurrentGhost)""\_a"
	}
	else
	{
		"\![*]\__q[OnCalibrationStart,""%(reference[0])""]Recalibrate ""%(CurrentGhost)""\__q"
	}
	"\n\n"
	
	"\![*]\__q[OnExclusionMenu,""%(reference[0])""]Exclusion list\__q\n\n"
	
	if MetSpectre
	{
		_times = ("15m,900","20m,1200","30m,1800","45m,2700","60m,3000")
		if DebugMode == 1; _times = ("30s,30",_times)
		"Talkrate:\n"
		foreach _times; _time
		{
			switch TOINT(_time[1]) == aitalkinterval
			{
				"\__q[OnSetTalkTime,""%(reference[0])"",%(_time[1])]%(_time[0])\__q"
				"\f[color,default.anchor]\f[underline,1]\__q[OnSetTalkTime,""%(reference[0])"",%(_time[1])]%(_time[0])\__q\f[underline,default]\f[color,default]"
			}
			"  "
		}
		"\n\n"
	}
	
	
	
	"\![*]\__q[OnMainMenu,""%(reference[0])""]Back\__q  \![*]\__q[OnCancel]Done\__q"
	"\![unlock,balloonrepaint]"
}

OnExclusionMenu : all
{
	res_marker = version
	
	if reference[0] != ""; CurrentGhost = reference[0]
	
	"\C\![lock,balloonrepaint]\c"
	"\0\_q\*\b[4,--fallback=2]\![no-autopause]\![set,autoscroll,disable]"
	"%(Heading('Exclusion list'))"
	
	"Select ghosts to exclude from Spectre's effects:\n"
	"(Note that ghosts may use Spectre's effects anyway if all ghosts are excluded.)\n\n"
	//"%(ExcludedGhosts)\n\n"
	for _i = 0; _i < ARRAYSIZE(BootedGhosts); _i++
	{
		_ghost = BootedGhosts[_i]
		
		switch ASEARCH(_ghost,ExcludedGhosts) != -1
		{
			"\__q[OnExcludeGhost,""%(reference[0])"",""%(_ghost)""]%(_ghost)\__q\n"
			"\f[color,disable]\__q[OnExcludeGhost,""%(reference[0])"",""%(_ghost)""]%(_ghost)\__q\f[color,default]\n"
		}
	}
	
	"\n"
	"\![*]\__q[OnSettings,""%(reference[0])""]Back\__q  \![*]\__q[OnCancel]Done\__q"
	"\![unlock,balloonrepaint]"
}

OnExcludeGhost
{
	if reference[0] != ""; CurrentGhost = reference[0]
	
	if !ISVAR("ExcludedGhosts"); ExcludedGhosts = IARRAY
	
	_index = ASEARCH(reference[1],ExcludedGhosts)
	if _index == -1
	{
		ExcludedGhosts ,= reference[1]
	}
	else
	{
		ExcludedGhosts[_index] = IARRAY
	}
	
	"\C\![raiseplugin,Spectre,OnExclusionMenu,""%(reference[0])""]"
}

OnSetTalkTime
{
	if reference[0] != ""; CurrentGhost = reference[0]
	
	aitalkinterval = TOINT(reference[1])
	"\C\![raiseplugin,Spectre,OnSettings,""%(reference[0])""]"
}

OnCancel
{
	"\e"
}