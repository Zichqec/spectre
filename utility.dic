IsCalibrated
{
	_index = ASEARCH(_argv[0],GhostCalibrations.Name)
	if _index != -1
	{
		_list = GhostCalibrations.List[_index]
		if _list != ""
		{
			1
			return
		}
	}
	0
}

CalibrationIndex
{
	ASEARCH(_argv[0],GhostCalibrations.Name)
}

Flag
{
	if ASEARCH(_argv[0],Flags) != -1; 1
	else; 0
}

OnAddFlag
{
	AddFlag(reference[0])
}

AddFlag
{
	if ASEARCH(_argv[0],Flags) == -1; Flags ,= _argv[0]
}

DeleteFlag
{
	_loop = 0
	while ASEARCH(_argv[0],Flags) != -1
	{
		_i = ASEARCH(_argv[0],Flags)
		Flags[_i] = IARRAY
		_loop++
		if _loop >= 1000; break
	}
}

Heading
{
	"\f[align,center]\f[bold,1]%(_argv[0])\f[bold,default]\n\f[align,left]"
}

ControlLevel
{
	_ghost = TalkingGhost
	_index = CalibrationIndex(_ghost)
	
	if _index == -1; "Uncalibrated"
	else
	{
		_list = GhostCalibrations.List[_index]
		
		if _list == "none"; "none"
		else
		{
			_i = 0
			foreach _list; _surface
			{
				if _surface != -1; _i++
			}
			
			case _i
			{
				when 0-1; "none"
				when 2-4; "low"
				when 5-8; "medium"
				others; "high"
			}
		}
	}
}

end
{
	_emotion = ""
	if Flag("Stage 3")
	{
		if "cheerful" _in_ TodaysPool; _emotion = "cheerful"
		elseif "miserable" _in_ TodaysPool; _emotion = "miserable"
		else; _emotion = "dissociated"
	}
	elseif Flag("Stage 1") //1 or 2
	{
		_emotion = "miserable"
	}
	else //Stage 0
	{
		_emotion = "dissociated"
	}
	
	_spookytext = 0
	if _argv[0] == "spookytext"; _spookytext = 1
	"\![timerraise,15000,1,OnSpectrePlugin.Possession,%(_emotion),%(_spookytext)]"
}

//randomly make the input be an array of letters or an array of words - adjustable with _argv[1]
AtomizeInput
{
	_input = _argv[0]
	_output = IARRAY
	
	_letters_or_words = RAND(2)
	if _argv[1] != ""; _letters_or_words = _argv[1]
	
	if _letters_or_words == 0
	{
		for _i = 0; _i < STRLEN(_input); _i++
		{
			_output ,= SUBSTR(_input,_i,1)
		}
	}
	else
	{
		_string = SPLIT(_input," ")
		for _i = 0; _i < ARRAYSIZE(_string); _i++
		{
			if ARRAYSIZE(_output) > 0; _output ,= " "
			_output ,= _string[_i]
		}
	}
	_output
}

SpookyText
{
	_list = GETFUNCLIST("SpookyText.")
	_effect = ANY(_list)
	
	EVAL("%(_effect)(""%(_argv[0])"")")
}

SpookyText.scatter : all
{
	_input = AtomizeInput(_argv[0])
	
	for _i = 0; _i < ARRAYSIZE(_input); _i++
	{
		if _input[_i] == " "; continue
		
		"\f[height,%(ANY('+,-'))%(RAND(2) + 1)]"
		"\_l[%(RAND(247)),%(RAND(25))]"
		_input[_i]
	}
}

SpookyText.droopy : all
{
	_y = 0
	_word = AtomizeInput(_argv[0])
	for _i = 0; _i < ARRAYSIZE(_word); _i++
	{
		_randy = RAND(11) - 5
		_y += _randy
		if _y < 0; _y = 0
		"\_l[,%(_y)]"
		_word[_i]
	}
}

SpookyText.drippy : all
{
	_word = AtomizeInput(_argv[0])
	for _i = 0; _i < ARRAYSIZE(_word); _i++
	{
		for _y = 0; _y < 25; _y++
		{
			"\_l[%(_i)em,%(_y)]"
			_word[_i]
		}
	}
}

SpookyText.overflow : all
{
	_word = _argv[0]
	_amt = 15
	if _argv[1] != ""; _amt = TOINT(_argv[1])
	"\![set,balloonwait,0.10]"
	for _y = 0; _y < _amt; _y++
	{
		_word
		"\_l[0,0]\n[%(_y)0]"
	}
	_word
}

SpookyText.grow : all
{
	_word = AtomizeInput(_argv[0])
	"\f[height,6]"
	for _i = 0; _i < ARRAYSIZE(_word); _i++
	{
		if ARRAYSIZE(_word) < 20 || _i % 2 == 0; "\f[height,+1]"
		_word[_i]
	}
}

SpookyText.shrink : all
{
	_word = AtomizeInput(_argv[0])
	"\f[height,20]"
	for _i = 0; _i < ARRAYSIZE(_word); _i++
	{
		if ARRAYSIZE(_word) < 20 || _i % 2 == 0; "\f[height,-1]"
		_word[_i]
	}
}

SpookyText.patchy : all
{
	_word = _argv[0]
	_color = 0
	for _i = 0; _i < STRLEN(_word); _i++
	{
		if RAND(8) == 0
		{
			if _color != 1; _color = 1
			else; _color = 0
			
			switch _color
			{
				"\f[color,default]"
				"\f[color,disable]"
			}
		}
		SUBSTR(_word,_i,1)
	}
}

SpookyText.screams : all
{
	_word = _argv[0]
	for _i = 0; _i < STRLEN(_word); _i++
	{
		if RAND(10) == 0
		{
			_rand = RAND(8) + 3
			for _ii = 0; _ii < _rand; _ii++
			{
				TOUPPER(SUBSTR(_word,_i,1))
			}
		}
		SUBSTR(_word,_i,1)
	}
}

SpookyText.crossword : all
{
	_word = _argv[0]
	_x = 0
	_y = 0
	for _i = 0; _i < STRLEN(_word); _i++
	{
		if SUBSTR(_word,_i,1) == " "; continue
		"\_l[%(_x)em,%(_y)em]"
		SUBSTR(_word,_i,1)
		_y++
		if _y >= 3
		{
			_x++
			_y = 0
		}
	}
}

SpookyText.linebyline : all
{
	_input = IARRAY
	_string = SPLIT(_argv[0]," ")
	for _i = 0; _i < ARRAYSIZE(_string); _i++
	{
		if ARRAYSIZE(_input) > 0; _input ,= " "
		_input ,= _string[_i]
	}
	
	_aligntype = RAND(6)
	_alignindex = 0
	
	for _i = 0; _i < ARRAYSIZE(_input); _i++
	{
		if _aligntype == 3; "\f[align,center]" //center aligned
		if _aligntype == 4; "\f[align,right]" //right aligned
		
		if _input[_i] == " "; continue
		_input[_i]
		"\n"
		
		if _aligntype == 1 //left & right
		{
			if _alignindex % 2 == 0; "\f[align,right]"
			else; "\f[align,left]"
		}
		elseif _aligntype == 2 //left right & center
		{
			if _alignindex % 3 == 0; "\f[align,center]"
			elseif _alignindex % 3 == 1; "\f[align,right]"
			else; "\f[align,left]"
		}
		elseif _aligntype == 5 //back-and-forth
		{
			if _alignindex % 4 == 0; "\f[align,center]"
			elseif _alignindex % 4 == 1; "\f[align,right]"
			elseif _alignindex % 4 == 2; "\f[align,center]"
			else; "\f[align,left]"
		}
		_alignindex++
	}
}

isdaytime
{
	if hour >= 7 && hour <= 19; 1
	else; 0
}

//yes this variable got replaced with a flag don't @ me this is easier to type for checks
MetSpectre
{
	Flag("Stage 1")
}

emdash
{
	"\f[name,calibri]â€”\f[name,default]"
}

CanGoToStage2
{
	Flag("User is not lost") && (Flag("Spectre hasn't eaten") || Flag("Spectre hasn't drank") || Flag("Spectre doesn't breathe"))
}